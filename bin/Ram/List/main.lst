###############################################################################
#                                                                             #
#                                                       02/Mar/2014  21:14:40 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\FREESCALE智能车竞赛\freescale(九)\程序\PhotoelectricC #
#                    ar V1.1\src\Sources\C\main.c                             #
#    Command line =  "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectric #
#                    Car V1.1\src\Sources\C\main.c" -D IAR -D TWR_K60N512     #
#                    -lCN "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoele #
#                    ctricCar V1.1\bin\Ram\List\" -lB                         #
#                    "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectric #
#                    Car V1.1\bin\Ram\List\" -o "D:\FREESCALE智能车竞赛\frees #
#                    cale(九)\程序\PhotoelectricCar V1.1\bin\Ram\Obj\"        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config E:\IAREW6.3\arm\INC\c\DLib_Config_Normal.h #
#                     -I "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelec #
#                    tricCar V1.1\src\Sources\H\" -I                          #
#                    "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectric #
#                    Car V1.1\src\Sources\H\Component_H\" -I                  #
#                    "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectric #
#                    Car V1.1\src\Sources\H\Frame_H\" -Ol --use_c++_inline    #
#    List file    =  D:\FREESCALE智能车竞赛\freescale(九)\程序\PhotoelectricC #
#                    ar V1.1\bin\Ram\List\main.lst                            #
#    Object file  =  D:\FREESCALE智能车竞赛\freescale(九)\程序\PhotoelectricC #
#                    ar V1.1\bin\Ram\Obj\main.o                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\FREESCALE智能车竞赛\freescale(九)\程序\PhotoelectricCar V1.1\src\Sources\C\main.c
      1          //头文件
      2          #include "includes.h"
      3          
      4          //全局变量声明
      5          extern int   periph_clk_khz;
      6          extern int16 cl_f;//如果赋初值，会出现重复定义
      7          extern int16 front_l,front_r;
      8          extern int16 cl_f_long,cl_b_long;
      9          extern int16 front_reference,back_reference;
     10          extern uint8 IntegrationTime_Front,IntegrationTime_Back;

   \                                 In section .bss, align 1
     11          uint8        integration_piont_Front,integration_piont_Back;
   \                     integration_piont_Front:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     integration_piont_Back:
   \   00000000                      DS8 1
     12          extern uint8 Pixel_F[128],Pixel_B[128];
     13          extern uint8 TIME1flag_20ms;

   \                                 In section .bss, align 2
     14          int16        Motor_Lock;
   \                     Motor_Lock:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     15          uint8        a=0;
   \                     a:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     16          uint8        showcnt=0;
   \                     showcnt:
   \   00000000                      DS8 1
     17          //函数声明
     18          void  system_init();
     19          void  button_init();
     20          //主函数

   \                                 In section .text, align 2, keep-with-next
     21          void main()
     22          {
   \                     main:
   \   00000000   0xB510             PUSH     {R4,LR}
     23             int8   j;
     24             uint8  *pixel_pt;
     25             //uint8  send_data_cnt = 0;
     26             int16  LCD_Average_Flag=0;
   \   00000002   0x2400             MOVS     R4,#+0
     27             
     28             pixel_pt = Pixel_F;
   \   00000004   0x....             LDR.N    R1,??DataTable1
     29             for(j=0; j<128+10; j++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE003             B.N      ??main_0
     30             {
     31                *pixel_pt++ = 0;
   \                     ??main_1:
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x700A             STRB     R2,[R1, #+0]
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
     32             }
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \                     ??main_0:
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x288A             CMP      R0,#+138
   \   00000016   0xD3F8             BCC.N    ??main_1
     33             pixel_pt = Pixel_B;
   \   00000018   0x....             LDR.N    R1,??DataTable1_1
     34             for(j=0; j<128+10; j++)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xE003             B.N      ??main_2
     35             {
     36                *pixel_pt++ = 0;
   \                     ??main_3:
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x700A             STRB     R2,[R1, #+0]
   \   00000022   0x1C49             ADDS     R1,R1,#+1
     37             }
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \                     ??main_2:
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x288A             CMP      R0,#+138
   \   0000002A   0xD3F8             BCC.N    ??main_3
     38          
     39             system_init();
   \   0000002C   0x.... 0x....      BL       system_init
     40             /*
     41             serial_choose();
     42             uart_send1(UART3 ,  gravity );        //PTC16接串口模块的uart3_RX，PTC17接串口模块的uart3_TX
     43             uart_send1(UART3 , gyro );
     44             */
     45             
     46             while(1)                              //等待1ms中断
     47             {  
     48              Motor_Lock=1;
   \                     ??main_4:
   \   00000030   0x....             LDR.N    R0,??DataTable1_2
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x8001             STRH     R1,[R0, #+0]
     49              if(TIME1flag_20ms==1)
   \   00000036   0x....             LDR.N    R0,??DataTable1_3
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD1F8             BNE.N    ??main_4
     50              {
     51                 TIME1flag_20ms=0;
   \   0000003E   0x....             LDR.N    R0,??DataTable1_3
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x7001             STRB     R1,[R0, #+0]
     52                 get_front();
   \   00000044   0x.... 0x....      BL       get_front
     53                 cl_f_long+=cl_f;
   \   00000048   0x....             LDR.N    R0,??DataTable1_4
   \   0000004A   0x8800             LDRH     R0,[R0, #+0]
   \   0000004C   0x....             LDR.N    R1,??DataTable1_5
   \   0000004E   0x8809             LDRH     R1,[R1, #+0]
   \   00000050   0x1808             ADDS     R0,R1,R0
   \   00000052   0x....             LDR.N    R1,??DataTable1_4
   \   00000054   0x8008             STRH     R0,[R1, #+0]
     54                 //get_back();
     55                 //cl_b_long+=cl_b;
     56                 /*   
     57                 if(++send_data_cnt >= 5)        //每100ms给CCDview发送数据
     58                 {
     59                    send_data_cnt =0;
     60                    SendImageData(Pixel_F);
     61                    //SendImageData(Pixel_B); 
     62                 }
     63                 */
     64                 if(++LCD_Average_Flag>9)
   \   00000056   0x1C64             ADDS     R4,R4,#+1
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000005C   0x280A             CMP      R0,#+10
   \   0000005E   0xDBE7             BLT.N    ??main_4
     65                 {
     66                   LCD_Average_Flag=0;
   \   00000060   0x2400             MOVS     R4,#+0
     67                   front_reference=(int16)(cl_f_long/10);//不合理，left或right可能为255，但可通过人为修正
   \   00000062   0x....             LDR.N    R0,??DataTable1_4
   \   00000064   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000068   0x210A             MOVS     R1,#+10
   \   0000006A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000006E   0x....             LDR.N    R1,??DataTable1_6
   \   00000070   0x8008             STRH     R0,[R1, #+0]
     68                   back_reference=(int16)(cl_b_long/10);
   \   00000072   0x....             LDR.N    R0,??DataTable1_7
   \   00000074   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000078   0x210A             MOVS     R1,#+10
   \   0000007A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000007E   0x....             LDR.N    R1,??DataTable1_8
   \   00000080   0x8008             STRH     R0,[R1, #+0]
     69                   LCD_P8x16_number(10,0,front_reference);
   \   00000082   0x....             LDR.N    R0,??DataTable1_6
   \   00000084   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000088   0x2100             MOVS     R1,#+0
   \   0000008A   0x200A             MOVS     R0,#+10
   \   0000008C   0x.... 0x....      BL       LCD_P8x16_number
     70                   //LCD_P8x16_number(70,0,back_reference);
     71                   LCD_P8x16_number(10,2,front_l);
   \   00000090   0x....             LDR.N    R0,??DataTable1_9
   \   00000092   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000096   0x2102             MOVS     R1,#+2
   \   00000098   0x200A             MOVS     R0,#+10
   \   0000009A   0x.... 0x....      BL       LCD_P8x16_number
     72                   LCD_P8x16_number(70,2,front_r);
   \   0000009E   0x....             LDR.N    R0,??DataTable1_10
   \   000000A0   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   000000A4   0x2102             MOVS     R1,#+2
   \   000000A6   0x2046             MOVS     R0,#+70
   \   000000A8   0x.... 0x....      BL       LCD_P8x16_number
     73                   cl_f_long=0;
   \   000000AC   0x....             LDR.N    R0,??DataTable1_4
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x8001             STRH     R1,[R0, #+0]
     74                   cl_b_long=0;
   \   000000B2   0x....             LDR.N    R0,??DataTable1_7
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x8001             STRH     R1,[R0, #+0]
     75                   //按键跳出初始化循环
     76                   KeyScan();
   \   000000B8   0x.... 0x....      BL       KeyScan
     77                   if(a!=0)break;
   \   000000BC   0x....             LDR.N    R0,??DataTable1_11
   \   000000BE   0x7800             LDRB     R0,[R0, #+0]
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD0B5             BEQ.N    ??main_4
     78                 }
     79              }
     80             }
     81             
     82             while(1)                              //等待1ms中断
     83             { 
     84              Motor_Lock=1;
   \                     ??main_5:
   \   000000C4   0x....             LDR.N    R0,??DataTable1_2
   \   000000C6   0x2101             MOVS     R1,#+1
   \   000000C8   0x8001             STRH     R1,[R0, #+0]
     85              if(TIME1flag_20ms==1)
   \   000000CA   0x....             LDR.N    R0,??DataTable1_3
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0x2801             CMP      R0,#+1
   \   000000D0   0xD1F8             BNE.N    ??main_5
     86              {
     87                 TIME1flag_20ms=0;
   \   000000D2   0x....             LDR.N    R0,??DataTable1_3
   \   000000D4   0x2100             MOVS     R1,#+0
   \   000000D6   0x7001             STRB     R1,[R0, #+0]
     88                 get_front();
   \   000000D8   0x.... 0x....      BL       get_front
     89                 get_back();
   \   000000DC   0x.... 0x....      BL       get_back
     90                 
     91                 showcnt++;
   \   000000E0   0x....             LDR.N    R0,??DataTable1_12
   \   000000E2   0x7800             LDRB     R0,[R0, #+0]
   \   000000E4   0x1C40             ADDS     R0,R0,#+1
   \   000000E6   0x....             LDR.N    R1,??DataTable1_12
   \   000000E8   0x7008             STRB     R0,[R1, #+0]
     92                 if(showcnt==5)
   \   000000EA   0x....             LDR.N    R0,??DataTable1_12
   \   000000EC   0x7800             LDRB     R0,[R0, #+0]
   \   000000EE   0x2805             CMP      R0,#+5
   \   000000F0   0xD1E8             BNE.N    ??main_5
     93                 {
     94                   showcnt=0;
   \   000000F2   0x....             LDR.N    R0,??DataTable1_12
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x7001             STRB     R1,[R0, #+0]
     95                   LCD_show();
   \   000000F8   0x.... 0x....      BL       LCD_show
   \   000000FC   0xE7E2             B.N      ??main_5
     96                 }
     97                 /*
     98                 if(++send_data_cnt >= 5)        //每100ms给CCDview发送数据
     99                 {
    100                    send_data_cnt =0;
    101                    SendImageData(Pixel_F);
    102                    //SendImageData(Pixel_B); 
    103                 }
    104                 */
    105              }
    106             }
    107          }
    108          

   \                                 In section .text, align 4, keep-with-next
    109          void system_init()
    110          {
   \                     system_init:
   \   00000000   0xB580             PUSH     {R7,LR}
    111              //uint8  send_data_cnt = 0;观察发现如此采集的图像高低跳动
    112              DisableInterrupts;                          //关闭总中断
   \   00000002   0xB672             CPSID i         
    113              uart_init(UART3,periph_clk_khz,115200);     //串口初始化
   \   00000004   0xF45F 0x32E1      MOVS     R2,#+115200
   \   00000008   0x....             LDR.N    R0,??DataTable1_13
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0x....             LDR.N    R0,??DataTable1_14  ;; 0x4006d000
   \   0000000E   0x.... 0x....      BL       uart_init
    114              FTM_PWM_Init(0,300);                        //舵机频率初始化
   \   00000012   0xF44F 0x7196      MOV      R1,#+300
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       FTM_PWM_Init
    115              FTM_PWM_Open(0,2,5000);
   \   0000001C   0xF241 0x3288      MOVW     R2,#+5000
   \   00000020   0x2102             MOVS     R1,#+2
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       FTM_PWM_Open
    116              FTM_PWM_Init(1,1000);                       //电机频率初始化 pwm频率为10kHz
   \   00000028   0xF44F 0x717A      MOV      R1,#+1000
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       FTM_PWM_Init
    117              Motor_init();                               //电机初始化   
   \   00000032   0x.... 0x....      BL       Motor_init
    118              //FTM_QUAD_init();                           //正交解码测速初始化
    119              CCD_init();
   \   00000036   0x.... 0x....      BL       CCD_init
    120              LCD_Init();                                 //OLED液晶初始化
   \   0000003A   0x.... 0x....      BL       LCD_Init
    121              button_init();
   \   0000003E   0x.... 0x....      BL       button_init
    122              
    123              //while(1){;}  
    124              hw_pit_init(0,60000);                       //配置pit定时器0,1ms中断(60000)
   \   00000042   0xF64E 0x2160      MOVW     R1,#+60000
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      BL       hw_pit_init
    125              enable_pit_interrupt(0);                    //开pit中断0通道
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      BL       enable_pit_interrupt
    126              EnableInterrupts;                           //开启总中断,中断开启后，此刻就进行1ms的定时吗？
   \   00000052   0xB662             CPSIE i         
    127              
    128              
    129                  
    130          }
   \   00000054   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     Pixel_F

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     Pixel_B

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     Motor_Lock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     TIME1flag_20ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     cl_f_long

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     cl_f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     front_reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     cl_b_long

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     back_reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     front_l

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     front_r

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     showcnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x........         DC32     periph_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x4006D000         DC32     0x4006d000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  main
             8 -> KeyScan
             8 -> LCD_P8x16_number
             8 -> LCD_show
             8 -> get_back
             8 -> get_front
             8 -> system_init
        8  system_init
             8 -> CCD_init
             8 -> FTM_PWM_Init
             8 -> FTM_PWM_Open
             8 -> LCD_Init
             8 -> Motor_init
             8 -> button_init
             8 -> enable_pit_interrupt
             8 -> hw_pit_init
             8 -> uart_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       2  Motor_Lock
       1  a
       1  integration_piont_Back
       1  integration_piont_Front
     254  main
       1  showcnt
      86  system_init

 
   6 bytes in section .bss
 400 bytes in section .text
 
 400 bytes of CODE memory
   6 bytes of DATA memory

Errors: none
Warnings: none
