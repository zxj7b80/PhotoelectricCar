###############################################################################
#                                                                             #
#                                                       02/Mar/2014  21:19:23 #
# IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\FREESCALE智能车竞赛\freescale(九)\程序\PhotoelectricC #
#                    ar V1.1\src\Sources\C\isr.c                              #
#    Command line =  "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectric #
#                    Car V1.1\src\Sources\C\isr.c" -D IAR -D TWR_K60N512      #
#                    -lCN "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoele #
#                    ctricCar V1.1\bin\Ram\List\" -lB                         #
#                    "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectric #
#                    Car V1.1\bin\Ram\List\" -o "D:\FREESCALE智能车竞赛\frees #
#                    cale(九)\程序\PhotoelectricCar V1.1\bin\Ram\Obj\"        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config E:\IAREW6.3\arm\INC\c\DLib_Config_Normal.h #
#                     -I "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelec #
#                    tricCar V1.1\src\Sources\H\" -I                          #
#                    "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectric #
#                    Car V1.1\src\Sources\H\Component_H\" -I                  #
#                    "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectric #
#                    Car V1.1\src\Sources\H\Frame_H\" -Ol --use_c++_inline    #
#    List file    =  D:\FREESCALE智能车竞赛\freescale(九)\程序\PhotoelectricC #
#                    ar V1.1\bin\Ram\List\isr.lst                             #
#    Object file  =  D:\FREESCALE智能车竞赛\freescale(九)\程序\PhotoelectricC #
#                    ar V1.1\bin\Ram\Obj\isr.o                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\FREESCALE智能车竞赛\freescale(九)\程序\PhotoelectricCar V1.1\src\Sources\C\isr.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名: isr.c                                                           *
      3          // 说  明: 中断处理程序                                                    *
      4          //-------------------------------------------------------------------------*
      5          
      6          #include "includes.h"

   \                                 In section .bss, align 1
      7          uint8        g_n1msEventCount =0;
   \                     g_n1msEventCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      8          static uint8 TimerCnt20ms =0;
   \                     TimerCnt20ms:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      9          uint8        g_nSpeedControlCount =0;
   \                     g_nSpeedControlCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     10          uint8        g_nDirectionControlCount =0;
   \                     g_nDirectionControlCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     11          uint8        Pixel_F[128]={0};
   \                     Pixel_F:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
     12          uint8        Pixel_B[128]={0};
   \                     Pixel_B:
   \   00000000                      DS8 128

   \                                 In section .bss, align 1
     13          uint8        TIME1flag_20ms=0;
   \                     TIME1flag_20ms:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     14          int16        speedflag=0;
   \                     speedflag:
   \   00000000                      DS8 2
     15          extern uint8 g_nSpeedControlPeriod;
     16          extern uint8 g_nDirectionControlPeriod;
     17          extern uint8 IntegrationTime_Front;
     18          extern uint8 IntegrationTime_Back;
     19          extern uint8 integration_piont_Front;
     20          extern uint8 integration_piont_Back;
     21          extern int16 Motor_Lock;

   \                                 In section .bss, align 2
     22          int16        i=0;
   \                     i:
   \   00000000                      DS8 2
     23          
     24          //该中断函数的执行时间是多少？

   \                                 In section .text, align 4, keep-with-next
     25          void pit0_isr(void)                    //定时器1ms中断函数
     26          {
   \                     pit0_isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     27                   DisableInterrupts;            //关总中断
   \   00000002   0xB672             CPSID i         
     28          
     29                   integration_piont_Front = 20 - IntegrationTime_Front;
   \   00000004   0x4835             LDR.N    R0,??pit0_isr_0
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0xF1D0 0x0014      RSBS     R0,R0,#+20
   \   0000000C   0x4934             LDR.N    R1,??pit0_isr_0+0x4
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
     30                   if(integration_piont_Front >= 2)//曝光点小于2不进行再曝光
   \   00000010   0x4833             LDR.N    R0,??pit0_isr_0+0x4
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD307             BCC.N    ??pit0_isr_1
     31                   {
     32                      if(integration_piont_Front == TimerCnt20ms)
   \   00000018   0x4831             LDR.N    R0,??pit0_isr_0+0x4
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x4931             LDR.N    R1,??pit0_isr_0+0x8
   \   0000001E   0x7809             LDRB     R1,[R1, #+0]
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD101             BNE.N    ??pit0_isr_1
     33                        StartIntegrationFront();
   \   00000024   0x.... 0x....      BL       StartIntegrationFront
     34                   }
     35          
     36                   integration_piont_Back = 20 - IntegrationTime_Back;
   \                     ??pit0_isr_1:
   \   00000028   0x482F             LDR.N    R0,??pit0_isr_0+0xC
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0xF1D0 0x0014      RSBS     R0,R0,#+20
   \   00000030   0x492E             LDR.N    R1,??pit0_isr_0+0x10
   \   00000032   0x7008             STRB     R0,[R1, #+0]
     37                   if(integration_piont_Back >= 2)//曝光点小于2不进行再曝光
   \   00000034   0x482D             LDR.N    R0,??pit0_isr_0+0x10
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x2802             CMP      R0,#+2
   \   0000003A   0xD307             BCC.N    ??pit0_isr_2
     38                   {
     39                      if(integration_piont_Back == TimerCnt20ms)
   \   0000003C   0x482B             LDR.N    R0,??pit0_isr_0+0x10
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x4928             LDR.N    R1,??pit0_isr_0+0x8
   \   00000042   0x7809             LDRB     R1,[R1, #+0]
   \   00000044   0x4288             CMP      R0,R1
   \   00000046   0xD101             BNE.N    ??pit0_isr_2
     40                        StartIntegrationBack();
   \   00000048   0x.... 0x....      BL       StartIntegrationBack
     41                   }
     42          
     43                   TimerCnt20ms++;
   \                     ??pit0_isr_2:
   \   0000004C   0x4825             LDR.N    R0,??pit0_isr_0+0x8
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x4924             LDR.N    R1,??pit0_isr_0+0x8
   \   00000054   0x7008             STRB     R0,[R1, #+0]
     44                   if(TimerCnt20ms>=20)
   \   00000056   0x4823             LDR.N    R0,??pit0_isr_0+0x8
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x2814             CMP      R0,#+20
   \   0000005C   0xD30F             BCC.N    ??pit0_isr_3
     45                   {
     46                      TimerCnt20ms=0;
   \   0000005E   0x4821             LDR.N    R0,??pit0_isr_0+0x8
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x7001             STRB     R1,[R0, #+0]
     47                      ImageCapture_F(Pixel_F);
   \   00000064   0x4822             LDR.N    R0,??pit0_isr_0+0x14
   \   00000066   0x.... 0x....      BL       ImageCapture_F
     48                      CalculateIntegrationTimeFront();
   \   0000006A   0x.... 0x....      BL       CalculateIntegrationTimeFront
     49                      ImageCapture_B(Pixel_B);
   \   0000006E   0x4821             LDR.N    R0,??pit0_isr_0+0x18
   \   00000070   0x.... 0x....      BL       ImageCapture_B
     50                      CalculateIntegrationTimeBack();
   \   00000074   0x.... 0x....      BL       CalculateIntegrationTimeBack
     51                      TIME1flag_20ms=1;
   \   00000078   0x481F             LDR.N    R0,??pit0_isr_0+0x1C
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x7001             STRB     R1,[R0, #+0]
     52                   }
     53                   //--------------------------------------------------------------------------
     54          
     55                   //g_nSpeedControlPeriod ++;
     56                   //SpeedControlOutput();
     57          
     58                   //g_nDirectionControlPeriod ++;
     59                   //SpeedControlOutput();
     60          
     61                   g_n1msEventCount ++;
   \                     ??pit0_isr_3:
   \   0000007E   0x481F             LDR.N    R0,??pit0_isr_0+0x20
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x1C40             ADDS     R0,R0,#+1
   \   00000084   0x491D             LDR.N    R1,??pit0_isr_0+0x20
   \   00000086   0x7008             STRB     R0,[R1, #+0]
     62                   switch(g_n1msEventCount)
   \   00000088   0x481C             LDR.N    R0,??pit0_isr_0+0x20
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x2801             CMP      R0,#+1
   \   0000008E   0xD007             BEQ.N    ??pit0_isr_4
   \   00000090   0xD318             BCC.N    ??pit0_isr_5
   \   00000092   0x2803             CMP      R0,#+3
   \   00000094   0xD006             BEQ.N    ??pit0_isr_6
   \   00000096   0xD304             BCC.N    ??pit0_isr_7
   \   00000098   0x2805             CMP      R0,#+5
   \   0000009A   0xD010             BEQ.N    ??pit0_isr_8
   \   0000009C   0xD30C             BCC.N    ??pit0_isr_9
   \   0000009E   0xE011             B.N      ??pit0_isr_5
     63                   {
     64                   case 1:
     65                        break;
   \                     ??pit0_isr_4:
   \   000000A0   0xE010             B.N      ??pit0_isr_5
     66                   case 2:
     67                        //MotorOutput();
     68                        break;
   \                     ??pit0_isr_7:
   \   000000A2   0xE00F             B.N      ??pit0_isr_5
     69                   case 3:
     70                        if(Motor_Lock==1)
   \                     ??pit0_isr_6:
   \   000000A4   0x4816             LDR.N    R0,??pit0_isr_0+0x24
   \   000000A6   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000AA   0x2801             CMP      R0,#+1
   \   000000AC   0xD103             BNE.N    ??pit0_isr_10
     71                        {
     72                          SetMotorVoltage(0.25);
   \   000000AE   0xF05F 0x507A      MOVS     R0,#+1048576000
   \   000000B2   0x.... 0x....      BL       SetMotorVoltage
     73                          /*
     74                          g_nSpeedControlCount ++;
     75            	        if(g_nSpeedControlCount >= 20)
     76            	        {
     77                             speedflag++;
     78            	           SpeedControl();
     79            		   g_nSpeedControlCount = 0;
     80            		   g_nSpeedControlPeriod = 0; 			
     81            	        }
     82                          */
     83                        }
     84                        
     85                        break;
   \                     ??pit0_isr_10:
   \   000000B6   0xE005             B.N      ??pit0_isr_5
     86                   case 4:
     87                        /*
     88                        g_nDirectionControlCount ++;
     89                        if(g_nDirectionControlCount >= 4)
     90            	      {
     91                           SetServoVoltage();
     92                           delay_ms(10);
     93            		 g_nDirectionControlCount = 0;
     94            		 g_nDirectionControlPeriod = 0;
     95                        }
     96                        */
     97                        SetServoVoltage();
   \                     ??pit0_isr_9:
   \   000000B8   0x.... 0x....      BL       SetServoVoltage
     98                        break;
   \   000000BC   0xE002             B.N      ??pit0_isr_5
     99                   case 5:
    100                        g_n1msEventCount = 0;
   \                     ??pit0_isr_8:
   \   000000BE   0x480F             LDR.N    R0,??pit0_isr_0+0x20
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x7001             STRB     R1,[R0, #+0]
    101                        //GetMotorPulse();
    102                        break;
    103                   }
    104          
    105                   PIT_TFLG(0)|=PIT_TFLG_TIF_MASK;          //清中断标志位
   \                     ??pit0_isr_5:
   \   000000C4   0x480F             LDR.N    R0,??pit0_isr_0+0x28  ;; 0x4003710c
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000CC   0x490D             LDR.N    R1,??pit0_isr_0+0x28  ;; 0x4003710c
   \   000000CE   0x6008             STR      R0,[R1, #+0]
    106                   enable_pit_interrupt(0);                 //使能PIT中断
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x.... 0x....      BL       enable_pit_interrupt
    107                   EnableInterrupts;                        //开总中断
   \   000000D6   0xB662             CPSIE i         
    108          }
   \   000000D8   0xBD01             POP      {R0,PC}          ;; return
   \   000000DA   0xBF00             Nop      
   \                     ??pit0_isr_0:
   \   000000DC   0x........         DC32     IntegrationTime_Front
   \   000000E0   0x........         DC32     integration_piont_Front
   \   000000E4   0x........         DC32     TimerCnt20ms
   \   000000E8   0x........         DC32     IntegrationTime_Back
   \   000000EC   0x........         DC32     integration_piont_Back
   \   000000F0   0x........         DC32     Pixel_F
   \   000000F4   0x........         DC32     Pixel_B
   \   000000F8   0x........         DC32     TIME1flag_20ms
   \   000000FC   0x........         DC32     g_n1msEventCount
   \   00000100   0x........         DC32     Motor_Lock
   \   00000104   0x4003710C         DC32     0x4003710c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  pit0_isr
             8 -> CalculateIntegrationTimeBack
             8 -> CalculateIntegrationTimeFront
             8 -> ImageCapture_B
             8 -> ImageCapture_F
             8 -> SetMotorVoltage
             8 -> SetServoVoltage
             8 -> StartIntegrationBack
             8 -> StartIntegrationFront
             8 -> enable_pit_interrupt


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     128  Pixel_B
     128  Pixel_F
       1  TIME1flag_20ms
       1  TimerCnt20ms
       1  g_n1msEventCount
       1  g_nDirectionControlCount
       1  g_nSpeedControlCount
       2  i
     264  pit0_isr
       2  speedflag

 
 265 bytes in section .bss
 264 bytes in section .text
 
 264 bytes of CODE memory
 265 bytes of DATA memory

Errors: none
Warnings: none
