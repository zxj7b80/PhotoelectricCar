///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      04/Apr/2014  21:08:03 /
// IAR ANSI C/C++ Compiler V6.30.4.23288/W32 EVALUATION for ARM               /
// Copyright 1999-2011 IAR Systems AB.                                        /
//                                                                            /
//    Cpu mode     =  thumb                                                   /
//    Endian       =  little                                                  /
//    Source file  =  D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectric /
//                    Car V1.2\src\Sources\C\Component_C\oled.c               /
//    Command line =  "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectri /
//                    cCar V1.2\src\Sources\C\Component_C\oled.c" -D IAR -D   /
//                    TWR_K60N512 -lCN "D:\FREESCALE智能车竞赛\freescale(九)\ /
//                    程序\PhotoelectricCar V1.2\bin\Flash\List\" -lB         /
//                    "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectri /
//                    cCar V1.2\bin\Flash\List\" -o                           /
//                    "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectri /
//                    cCar V1.2\bin\Flash\Obj\" --no_cse --no_unroll          /
//                    --no_inline --no_code_motion --no_tbaa --no_clustering  /
//                    --no_scheduling --debug --endian=little                 /
//                    --cpu=Cortex-M4 -e --fpu=None --dlib_config             /
//                    "E:\Program Files (x86)\IAREW6.3\arm\INC\c\DLib_Config_ /
//                    Normal.h" -I "D:\FREESCALE智能车竞赛\freescale(九)\程序 /
//                    \PhotoelectricCar V1.2\src\Sources\H\" -I               /
//                    "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectri /
//                    cCar V1.2\src\Sources\H\Component_H\" -I                /
//                    "D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectri /
//                    cCar V1.2\src\Sources\H\Frame_H\" -Ol --use_c++_inline  /
//    List file    =  D:\FREESCALE智能车竞赛\freescale(九)\程序\Photoelectric /
//                    Car V1.2\bin\Flash\List\oled.s                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME oled

        #define SHT_PROGBITS 0x1

        EXTERN LCD_P14x16Str
        EXTERN gpio_init

        PUBLIC CLS_single
        PUBLIC Draw_BMP
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC LCD_CLS
        PUBLIC LCD_DLY_ms
        PUBLIC LCD_Fill
        PUBLIC LCD_Init
        PUBLIC LCD_P6x8Str
        PUBLIC LCD_P8x16Str
        PUBLIC LCD_P8x16_num3wei
        PUBLIC LCD_P8x16_number
        PUBLIC LCD_Print
        PUBLIC LCD_PutPixel
        PUBLIC LCD_Rectangle
        PUBLIC LCD_Set_Pos
        PUBLIC LCD_WrCmd
        PUBLIC LCD_WrDat
        PUBLIC PHOTO_BUFF
        PUBLIC SetAddressingMode
        PUBLIC SetColumnAddress
        PUBLIC SetContrastControl
        PUBLIC SetPageAddress
        PUBLIC SetStartColumn
        PUBLIC SetStartLine
        PUBLIC SetStartPage
        PUBLIC Set_Charge_Pump
        PUBLIC Set_Common_Config
        PUBLIC Set_Common_Remap
        PUBLIC Set_Display_Clock
        PUBLIC Set_Display_Offset
        PUBLIC Set_Display_On_Off
        PUBLIC Set_Entire_Display
        PUBLIC Set_Inverse_Display
        PUBLIC Set_Multiplex_Ratio
        PUBLIC Set_NOP
        PUBLIC Set_Precharge_Period
        PUBLIC Set_Segment_Remap
        PUBLIC Set_VCOMH
        PUBLIC adjust
        PUBLIC show_pic

// D:\FREESCALE智能车竞赛\freescale(九)\程序\PhotoelectricCar V1.2\src\Sources\C\Component_C\oled.c
//    1 
//    2 //程序名：  OLED 驱动程序
//    3 //硬件平台：MK60DN512ZVLL10
//    4 //开发环境：IAR V6.3
//    5 //最后修改和注解的时间：
//    6 //                     2012.8.24
//    7 
//    8 
//    9 /*********引脚连接方式******************
//   10 G    电源地
//   11 3.3V 接3.3V电源
//   12 D0   PORTA_PA15  
//   13 D1   PORTA_PA16
//   14 RST  PORTA_PA13 
//   15 DC   PORTA_PA12
//   16 CS   已接地，不用接  
//   17 ****************************************/
//   18 
//   19 /****************************************************************************
//   20 4线SPI使用说明：
//   21 VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
//   22 VCC 供内部逻辑电压 1.8~6V   
//   23 GND 地
//   24 
//   25 CS  片选管脚
//   26 DC  命令数据选择管脚
//   27 RST 模块复位管脚 
//   28 D0（SCLK） ，时钟脚，由MCU控制
//   29 D1（MOSI） ，主输出从输入数据脚，由MCU控制
//   30   
//   31 ******************************************************************************/
//   32 
//   33 #include<oled.h>
//   34 #include<gpio.h>
//   35 //#include<ov7620.h>
//   36 #define ROW    255
//   37 #define COLUMN 255

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   38 uint8 PHOTO_BUFF[ROW][COLUMN];
PHOTO_BUFF:
        DS8 65028
//   39 //extern uint8 PHOTO_BUFF[ROW][COLUMN];
//   40 
//   41 #define LCD_SCL_H  gpio_init(PORTE, 6, 1,1)
//   42 #define LCD_SCL_L  gpio_init(PORTE, 6, 1,0)
//   43 
//   44 #define LCD_SDA_H  gpio_init(PORTE, 4, 1,1)
//   45 #define LCD_SDA_L  gpio_init(PORTE, 4, 1,0)
//   46 
//   47 #define LCD_RST_H  gpio_init(PORTE, 2, 1,1)
//   48 #define LCD_RST_L  gpio_init(PORTE, 2, 1,0)
//   49 
//   50 #define LCD_DC_H   gpio_init(PORTE, 0, 1,1)
//   51 #define LCD_DC_L   gpio_init(PORTE, 0, 1,0) 
//   52 
//   53 
//   54 #define XLevelL		0x00
//   55 #define XLevelH		0x10
//   56 #define XLevel		((XLevelH&0x0F)*16+XLevelL)
//   57 #define Max_Column	128
//   58 #define Max_Row		64
//   59 #define	Brightness	0xCF 
//   60 
//   61 #define X_WIDTH 128
//   62 #define Y_WIDTH 64
//   63 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   64 const uint8 F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   65 {
//   66     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   67     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   68     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   69     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   70     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   71     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   72     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   73     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   74     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   75     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   76     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   77     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   78     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   79     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   80     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   81     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   82     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//   83     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//   84     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//   85     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//   86     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//   87     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//   88     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//   89     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//   90     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//   91     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//   92     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//   93     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//   94     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//   95     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//   96     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//   97     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//   98     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//   99     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//  100     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//  101     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//  102     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//  103     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//  104     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//  105     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//  106     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//  107     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//  108     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//  109     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//  110     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//  111     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//  112     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  113     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  114     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  115     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  116     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  117     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  118     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  119     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  120     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  121     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  122     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  123     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  124     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  125     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  126     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  127     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  128     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  129     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  130     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  131     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  132     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  133     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  134     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  135     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  136     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  137     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  138     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  139     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  140     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  141     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  142     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  143     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  144     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  145     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  146     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  147     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  148     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  149     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  150     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  151     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  152     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  153     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  154     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  155     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  156     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  157     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  158 };
//  159 
//  160 //======================================================
//  161 // 128X64I液晶底层驱动[8X16]字体库
//  162 // 设计者: powerint
//  163 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  164 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  165 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  166 const uint8 F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  167 {
//  168 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  169   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  170   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  171   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  172   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  173   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  174   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  175   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  176   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  177   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  178   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  179   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  180   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  181   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  182   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  183   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  184   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  185   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  186   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  187   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  188   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  189   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  190   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  191   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  192   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  193   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  194   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  195   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  196   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  197   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  198   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  199   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  200   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  201   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  202   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  203   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  204   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  205   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  206   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  207   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  208   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  209   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  210   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  211   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  212   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  213   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  214   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  215   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  216   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  217   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  218   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  219   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  220   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  221   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  222   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  223   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  224   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  225   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  226   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  227   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  228   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  229   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  230   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  231   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  232   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  233   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  234   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  235   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  236   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  237   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  238   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  239   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  240   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  241   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  242   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  243   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  244   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  245   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  246   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  247   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  248   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  249   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  250   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  251   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  252   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  253   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  254   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  255   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  256   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  257   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  258   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  259   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  260   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  261   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  262   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  263 
//  264 };
//  265 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  266 void LCD_WrDat(uint8 data)
//  267 {
LCD_WrDat:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  268 	uint8 i=8;
        MOVS     R5,#+8
//  269 	LCD_DC_H;
        MOVS     R3,#+1
        MOVS     R2,#+1
        MOVS     R1,#+0
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  270         LCD_SCL_L;
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+6
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  271         asm("nop");    
        nop              
        B.N      ??LCD_WrDat_0
//  272         while(i--)
//  273           {
//  274             if(data&0x80){LCD_SDA_H;}
//  275             else{LCD_SDA_L;}
??LCD_WrDat_1:
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+4
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  276             LCD_SCL_H; 
??LCD_WrDat_2:
        MOVS     R3,#+1
        MOVS     R2,#+1
        MOVS     R1,#+6
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  277             asm("nop");
        nop              
//  278 	    asm("nop");            
        nop              
//  279             LCD_SCL_L;;    
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+6
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  280             data<<=1;    
        LSLS     R4,R4,#+1
??LCD_WrDat_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??LCD_WrDat_3
        LSLS     R0,R4,#+24
        BPL.N    ??LCD_WrDat_1
        MOVS     R3,#+1
        MOVS     R2,#+1
        MOVS     R1,#+4
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
        B.N      ??LCD_WrDat_2
//  281           }
//  282 }
??LCD_WrDat_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  283 void LCD_WrCmd(uint8 cmd)
//  284 {
LCD_WrCmd:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
//  285 	uint8 i=8;
        MOVS     R5,#+8
//  286 	LCD_DC_L;
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+0
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  287         LCD_SCL_L;
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+6
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  288   asm("nop");   
        nop              
        B.N      ??LCD_WrCmd_0
//  289   while(i--)
//  290   {
//  291     if(cmd&0x80){LCD_SDA_H;}
//  292     else{LCD_SDA_L;}
??LCD_WrCmd_1:
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+4
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  293     LCD_SCL_H;
??LCD_WrCmd_2:
        MOVS     R3,#+1
        MOVS     R2,#+1
        MOVS     R1,#+6
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  294     asm("nop");
        nop              
//  295     asm("nop");             
        nop              
//  296     LCD_SCL_L;    
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+6
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  297     cmd<<=1;;   
        LSLS     R4,R4,#+1
??LCD_WrCmd_0:
        MOVS     R0,R5
        SUBS     R5,R0,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??LCD_WrCmd_3
        LSLS     R0,R4,#+24
        BPL.N    ??LCD_WrCmd_1
        MOVS     R3,#+1
        MOVS     R2,#+1
        MOVS     R1,#+4
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
        B.N      ??LCD_WrCmd_2
//  298   } 	
//  299 	
//  300 }
??LCD_WrCmd_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  301 void LCD_Set_Pos(uint8 x,uint8 y)
//  302 { 
LCD_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  303   LCD_WrCmd(0xb0+y);
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  304   LCD_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  305   LCD_WrCmd((x&0x0f)|0x01); 
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  306 } 
        POP      {R4,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  307 void LCD_Fill(uint8 bmp_data)
//  308 {
LCD_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  309 	uint8 y,x;
//  310 	
//  311 	for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??LCD_Fill_0
//  312 	{
//  313 		LCD_WrCmd(0xb0+y);
//  314 		LCD_WrCmd(0x01);
//  315 		LCD_WrCmd(0x10);
//  316 		for(x=0;x<X_WIDTH;x++)
//  317 			LCD_WrDat(bmp_data);
??LCD_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R6,R6,#+1
??LCD_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BCC.N    ??LCD_Fill_1
        ADDS     R5,R5,#+1
??LCD_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BCS.N    ??LCD_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R6,#+0
        B.N      ??LCD_Fill_2
//  318 	}
//  319 }
??LCD_Fill_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  320 void LCD_CLS(void)
//  321 {
LCD_CLS:
        PUSH     {R3-R5,LR}
//  322 	uint8 y,x;	
//  323 	for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??LCD_CLS_0
//  324 	{
//  325 		LCD_WrCmd(0xb0+y);
//  326 		LCD_WrCmd(0x01);
//  327 		LCD_WrCmd(0x10); 
//  328 		for(x=0;x<X_WIDTH;x++)
//  329 			LCD_WrDat(0);
??LCD_CLS_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R5,R5,#+1
??LCD_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BCC.N    ??LCD_CLS_1
        ADDS     R4,R4,#+1
??LCD_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BCS.N    ??LCD_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R5,#+0
        B.N      ??LCD_CLS_2
//  330 	}
//  331 }
??LCD_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return
//  332 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  333 void CLS_single(uint8 num)
//  334 {
CLS_single:
        PUSH     {R4,LR}
//  335   uint8 y,x;
//  336   y=num;
//  337   LCD_WrCmd(0xb0+y);
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  338   LCD_WrCmd(0x01);
        MOVS     R0,#+1
        BL       LCD_WrCmd
//  339   LCD_WrCmd(0x10); 
        MOVS     R0,#+16
        BL       LCD_WrCmd
//  340   for(x=0;x<X_WIDTH;x++)
        MOVS     R4,#+0
        B.N      ??CLS_single_0
//  341   LCD_WrDat(0);
??CLS_single_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R4,R4,#+1
??CLS_single_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+128
        BCC.N    ??CLS_single_1
//  342 }
        POP      {R4,PC}          ;; return
//  343 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  344 void LCD_DLY_ms(uint32 ms)
//  345 {                         
LCD_DLY_ms:
        B.N      ??LCD_DLY_ms_0
//  346   uint32 a;
//  347   while(ms)
//  348   {
//  349     a=1335;
??LCD_DLY_ms_1:
        MOVW     R1,#+1335
//  350     while(a--);
??LCD_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        CMP      R2,#+0
        BNE.N    ??LCD_DLY_ms_2
//  351     ms--;
        SUBS     R0,R0,#+1
//  352   }
??LCD_DLY_ms_0:
        CMP      R0,#+0
        BNE.N    ??LCD_DLY_ms_1
//  353   return;
        BX       LR               ;; return
//  354 }
//  355 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  356 void adjust(uint8 a)
//  357 {
adjust:
        PUSH     {R7,LR}
//  358   LCD_WrCmd(a);	//指令数据0x0000~0x003f  
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  359 }
        POP      {R0,PC}          ;; return
//  360 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  361 void SetStartColumn(uint8 d)
//  362 {
SetStartColumn:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  363 	LCD_WrCmd(0x00+d%16);		// Set Lower Column Start Address for Page Addressing Mode
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R1,#+16
        SDIV     R0,R4,R1
        MLS      R0,R0,R1,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  364 						//   Default => 0x00
//  365 	LCD_WrCmd(0x10+d/16);		// Set Higher Column Start Address for Page Addressing Mode
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+16
        SDIV     R0,R4,R0
        ADDS     R0,R0,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  366 						//   Default => 0x10
//  367 }
        POP      {R4,PC}          ;; return
//  368 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  369 void SetAddressingMode(uint8 d)
//  370 {
SetAddressingMode:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  371 	LCD_WrCmd(0x20);			// Set Memory Addressing Mode
        MOVS     R0,#+32
        BL       LCD_WrCmd
//  372 	LCD_WrCmd(d);			//   Default => 0x02
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  373 						//     0x00 => Horizontal Addressing Mode
//  374 						//     0x01 => Vertical Addressing Mode
//  375 						//     0x02 => Page Addressing Mode
//  376 }
        POP      {R4,PC}          ;; return
//  377 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  378 void SetColumnAddress(uint8 a, uint8 b)
//  379 {
SetColumnAddress:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  380 	LCD_WrCmd(0x21);			// Set Column Address
        MOVS     R0,#+33
        BL       LCD_WrCmd
//  381 	LCD_WrCmd(a);			//   Default => 0x00 (Column Start Address)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  382 	LCD_WrCmd(b);			//   Default => 0x7F (Column End Address)
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  383 }
        POP      {R0,R4,R5,PC}    ;; return
//  384 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  385 void SetPageAddress(uint8 a, uint8 b)
//  386 {
SetPageAddress:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  387 	LCD_WrCmd(0x22);			// Set Page Address
        MOVS     R0,#+34
        BL       LCD_WrCmd
//  388 	LCD_WrCmd(a);			//   Default => 0x00 (Page Start Address)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  389 	LCD_WrCmd(b);			//   Default => 0x07 (Page End Address)
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  390 }
        POP      {R0,R4,R5,PC}    ;; return
//  391 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  392 void SetStartLine(uint8 d)
//  393 {
SetStartLine:
        PUSH     {R7,LR}
//  394 	LCD_WrCmd(0x40|d);			// Set Display Start Line
        ORRS     R0,R0,#0x40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  395 						//   Default => 0x40 (0x00)
//  396 }
        POP      {R0,PC}          ;; return
//  397 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  398 void SetContrastControl(uint8 d)
//  399 {
SetContrastControl:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  400 	LCD_WrCmd(0x81);			// Set Contrast Control
        MOVS     R0,#+129
        BL       LCD_WrCmd
//  401 	LCD_WrCmd(d);			//   Default => 0x7F
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  402 }
        POP      {R4,PC}          ;; return
//  403 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  404 void Set_Charge_Pump(uint8 d)
//  405 {
Set_Charge_Pump:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  406 	LCD_WrCmd(0x8D);			// Set Charge Pump
        MOVS     R0,#+141
        BL       LCD_WrCmd
//  407 	LCD_WrCmd(0x10|d);			//   Default => 0x10
        ORRS     R0,R4,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  408 						//     0x10 (0x00) => Disable Charge Pump
//  409 						//     0x14 (0x04) => Enable Charge Pump
//  410 }
        POP      {R4,PC}          ;; return
//  411 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  412 void Set_Segment_Remap(uint8 d)
//  413 {
Set_Segment_Remap:
        PUSH     {R7,LR}
//  414 	LCD_WrCmd(0xA0|d);			// Set Segment Re-Map
        ORRS     R0,R0,#0xA0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  415 						//   Default => 0xA0
//  416 						//     0xA0 (0x00) => Column Address 0 Mapped to SEG0
//  417 						//     0xA1 (0x01) => Column Address 0 Mapped to SEG127
//  418 }
        POP      {R0,PC}          ;; return
//  419 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  420 void Set_Entire_Display(uint8 d)
//  421 {
Set_Entire_Display:
        PUSH     {R7,LR}
//  422 	LCD_WrCmd(0xA4|d);			// Set Entire Display On / Off
        ORRS     R0,R0,#0xA4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  423 						//   Default => 0xA4
//  424 						//     0xA4 (0x00) => Normal Display
//  425 						//     0xA5 (0x01) => Entire Display On
//  426 }
        POP      {R0,PC}          ;; return
//  427 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  428 void Set_Inverse_Display(uint8 d)
//  429 {
Set_Inverse_Display:
        PUSH     {R7,LR}
//  430 	LCD_WrCmd(0xA6|d);			// Set Inverse Display On/Off
        ORRS     R0,R0,#0xA6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  431 						//   Default => 0xA6
//  432 						//     0xA6 (0x00) => Normal Display
//  433 						//     0xA7 (0x01) => Inverse Display On
//  434 }
        POP      {R0,PC}          ;; return
//  435 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  436 void Set_Multiplex_Ratio(uint8 d)
//  437 {
Set_Multiplex_Ratio:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  438 	LCD_WrCmd(0xA8);			// Set Multiplex Ratio
        MOVS     R0,#+168
        BL       LCD_WrCmd
//  439 	LCD_WrCmd(d);			//   Default => 0x3F (1/64 Duty)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  440 }
        POP      {R4,PC}          ;; return
//  441 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  442 void Set_Display_On_Off(uint8 d)
//  443 {
Set_Display_On_Off:
        PUSH     {R7,LR}
//  444 	LCD_WrCmd(0xAE|d);			// Set Display On/Off
        ORRS     R0,R0,#0xAE
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  445 						//   Default => 0xAE
//  446 						//     0xAE (0x00) => Display Off
//  447 						//     0xAF (0x01) => Display On
//  448 }
        POP      {R0,PC}          ;; return
//  449 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  450 void SetStartPage(uint8 d)
//  451 {
SetStartPage:
        PUSH     {R7,LR}
//  452 	LCD_WrCmd(0xB0|d);			// Set Page Start Address for Page Addressing Mode
        ORRS     R0,R0,#0xB0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  453 						//   Default => 0xB0 (0x00)
//  454 }
        POP      {R0,PC}          ;; return
//  455 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  456 void Set_Common_Remap(uint8 d)
//  457 {
Set_Common_Remap:
        PUSH     {R7,LR}
//  458 	LCD_WrCmd(0xC0|d);			// Set COM Output Scan Direction
        ORRS     R0,R0,#0xC0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  459 						//   Default => 0xC0
//  460 						//     0xC0 (0x00) => Scan from COM0 to 63
//  461 						//     0xC8 (0x08) => Scan from COM63 to 0
//  462 }
        POP      {R0,PC}          ;; return
//  463 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  464 void Set_Display_Offset(uint8 d)
//  465 {
Set_Display_Offset:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  466 	LCD_WrCmd(0xD3);			// Set Display Offset
        MOVS     R0,#+211
        BL       LCD_WrCmd
//  467 	LCD_WrCmd(d);			//   Default => 0x00
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  468 }
        POP      {R4,PC}          ;; return
//  469 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  470 void Set_Display_Clock(uint8 d)
//  471 {
Set_Display_Clock:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  472 	LCD_WrCmd(0xD5);			// Set Display Clock Divide Ratio / Oscillator Frequency
        MOVS     R0,#+213
        BL       LCD_WrCmd
//  473 	LCD_WrCmd(d);			//   Default => 0x80
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  474 						//     D[3:0] => Display Clock Divider
//  475 						//     D[7:4] => Oscillator Frequency
//  476 }
        POP      {R4,PC}          ;; return
//  477 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  478 void Set_Precharge_Period(uint8 d)
//  479 {
Set_Precharge_Period:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  480 	LCD_WrCmd(0xD9);			// Set Pre-Charge Period
        MOVS     R0,#+217
        BL       LCD_WrCmd
//  481 	LCD_WrCmd(d);			//   Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  482 						//     D[3:0] => Phase 1 Period in 1~15 Display Clocks
//  483 						//     D[7:4] => Phase 2 Period in 1~15 Display Clocks
//  484 }
        POP      {R4,PC}          ;; return
//  485 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  486 void Set_Common_Config(uint8 d)
//  487 {
Set_Common_Config:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  488 	LCD_WrCmd(0xDA);			// Set COM Pins Hardware Configuration
        MOVS     R0,#+218
        BL       LCD_WrCmd
//  489 	LCD_WrCmd(0x02|d);			//   Default => 0x12 (0x10)
        ORRS     R0,R4,#0x2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  490 						//     Alternative COM Pin Configuration
//  491 						//     Disable COM Left/Right Re-Map
//  492 }
        POP      {R4,PC}          ;; return
//  493 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  494 void Set_VCOMH(uint8 d)
//  495 {
Set_VCOMH:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  496 	LCD_WrCmd(0xDB);			// Set VCOMH Deselect Level
        MOVS     R0,#+219
        BL       LCD_WrCmd
//  497 	LCD_WrCmd(d);			//   Default => 0x20 (0.77*VCC)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  498 }
        POP      {R4,PC}          ;; return
//  499 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  500 void Set_NOP(void)
//  501 {
Set_NOP:
        PUSH     {R7,LR}
//  502 	LCD_WrCmd(0xE3);			// Command for No Operation
        MOVS     R0,#+227
        BL       LCD_WrCmd
//  503 }
        POP      {R0,PC}          ;; return
//  504 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  505 void LCD_Init(void)        
//  506 {
LCD_Init:
        PUSH     {R7,LR}
//  507      // DDRE=0XFF;
//  508   
//  509 	LCD_SCL_H;
        MOVS     R3,#+1
        MOVS     R2,#+1
        MOVS     R1,#+6
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  510 	//LCD_CS=1;	//预制SLK和SS为高电平   	
//  511 	
//  512 	LCD_RST_L;
        MOVS     R3,#+0
        MOVS     R2,#+1
        MOVS     R1,#+2
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  513 	LCD_DLY_ms(150);
        MOVS     R0,#+150
        BL       LCD_DLY_ms
//  514 	LCD_RST_H;
        MOVS     R3,#+1
        MOVS     R2,#+1
        MOVS     R1,#+2
        LDR.W    R0,??DataTable7  ;; 0x400ff100
        BL       gpio_init
//  515 	
//  516 	//从上电到下面开始初始化要有足够的时间，即等待RC复位完毕
//  517   Set_Display_On_Off(0x00);		  // Display Off (0x00/0x01)
        MOVS     R0,#+0
        BL       Set_Display_On_Off
//  518   Set_Display_Clock(0x80);		  // Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       Set_Display_Clock
//  519   Set_Multiplex_Ratio(0x3F);		// 1/64 Duty (0x0F~0x3F)
        MOVS     R0,#+63
        BL       Set_Multiplex_Ratio
//  520   Set_Display_Offset(0x00);		  // Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+0
        BL       Set_Display_Offset
//  521   SetStartLine(0x00);			      // Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+0
        BL       SetStartLine
//  522   Set_Charge_Pump(0x04);		    // Enable Embedded DC/DC Converter (0x00/0x04)
        MOVS     R0,#+4
        BL       Set_Charge_Pump
//  523   SetAddressingMode(0x02);		  // Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+2
        BL       SetAddressingMode
//  524   Set_Segment_Remap(0x01);		  // Set SEG/Column Mapping     0x00左右反置 0x01正常
        MOVS     R0,#+1
        BL       Set_Segment_Remap
//  525   Set_Common_Remap(0x08);			  // Set COM/Row Scan Direction 0x00上下反置 0x08正常
        MOVS     R0,#+8
        BL       Set_Common_Remap
//  526   Set_Common_Config(0x10);		  // Set Sequential Configuration (0x00/0x10)
        MOVS     R0,#+16
        BL       Set_Common_Config
//  527   SetContrastControl(Brightness);	// Set SEG Output Current
        MOVS     R0,#+207
        BL       SetContrastControl
//  528   Set_Precharge_Period(0xF1);		// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       Set_Precharge_Period
//  529   Set_VCOMH(0x40);			        // Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       Set_VCOMH
//  530   Set_Entire_Display(0x00);		  // Disable Entire Display On (0x00/0x01)
        MOVS     R0,#+0
        BL       Set_Entire_Display
//  531   Set_Inverse_Display(0x00);		// Disable Inverse Display On (0x00/0x01)  
        MOVS     R0,#+0
        BL       Set_Inverse_Display
//  532   Set_Display_On_Off(0x01);		  // Display On (0x00/0x01)
        MOVS     R0,#+1
        BL       Set_Display_On_Off
//  533   LCD_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       LCD_Fill
//  534 	LCD_Set_Pos(0,0); 
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       LCD_Set_Pos
//  535 	
//  536   /*
//  537   LCD_WrCmd(0xae);//--turn off oled panel
//  538   LCD_WrCmd(0x00);//---set low column address
//  539   LCD_WrCmd(0x10);//---set high column address
//  540   LCD_WrCmd(0x40);//--set start line address
//  541   LCD_WrCmd(0x81);//--set contrast control register
//  542   LCD_WrCmd(0xcf);
//  543   LCD_WrCmd(0xa1);//--set segment re-map 95 to 0
//  544   LCD_WrCmd(0xa6);//--set normal display
//  545   LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
//  546   LCD_WrCmd(0x3f);//--1/64 duty
//  547   LCD_WrCmd(0xd3);//-set display offset
//  548   LCD_WrCmd(0x00);//-not offset
//  549   LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
//  550   LCD_WrCmd(0x80);//--set divide ratio
//  551   LCD_WrCmd(0xd9);//--set pre-charge period
//  552   LCD_WrCmd(0xf1);
//  553   LCD_WrCmd(0xda);//--set com pins hardware configuration
//  554   LCD_WrCmd(0x12);
//  555   LCD_WrCmd(0xdb);//--set vcomh
//  556   LCD_WrCmd(0x40);
//  557   LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
//  558   LCD_WrCmd(0x14);//--set(0x10) disable
//  559   LCD_WrCmd(0xaf);//--turn on oled panel
//  560   */
//  561 	
//  562 } 
        POP      {R0,PC}          ;; return
//  563 //==============================================================
//  564 //函数名： void LCD_PutPixel(byte x,byte y)
//  565 //功能描述：绘制一个点（x,y）
//  566 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  567 //返回：无
//  568 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  569 void LCD_PutPixel(uint8 x,uint8 y)
//  570 {
LCD_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  571 	uint8 data1;  //data1当前点的数据 
//  572 	 
//  573         LCD_Set_Pos(x,y); 
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  574 	data1 = 0x01<<(y%8); 	
        MOVS     R0,#+1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R5,R1
        MLS      R2,R2,R1,R5
        LSLS     R6,R0,R2
//  575 	LCD_WrCmd(0xb0+(y>>3));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R0,R5,#+3
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  576 	LCD_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  577 	LCD_WrCmd((x&0x0f)|0x00);
        ANDS     R0,R4,#0xF
        BL       LCD_WrCmd
//  578 	LCD_WrDat(data1); 	 	
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  579 }
        POP      {R4-R6,PC}       ;; return
//  580 //==============================================================
//  581 //函数名： void LCD_Rectangle(byte x1,byte y1,
//  582 //                   byte x2,byte y2,byte color,byte gif)
//  583 //功能描述：绘制一个实心矩形
//  584 //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
//  585 //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
//  586 //返回：无
//  587 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  588 void LCD_Rectangle(uint8 x1,uint8 y1,uint8 x2,uint8 y2,uint8 gif)
//  589 {
LCD_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
        LDR      R4,[SP, #+32]
//  590 	uint8 n; 
//  591 		
//  592 	LCD_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  593 	for(n=x1;n<=x2;n++)
        MOV      R9,R5
        B.N      ??LCD_Rectangle_0
//  594 	{
//  595 		LCD_WrDat(0x01<<(y1%8)); 			
??LCD_Rectangle_1:
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  596 		if(gif == 1) 	LCD_DLY_ms(150);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??LCD_Rectangle_2
        MOVS     R0,#+150
        BL       LCD_DLY_ms
//  597 	}  
??LCD_Rectangle_2:
        ADDS     R9,R9,#+1
??LCD_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??LCD_Rectangle_1
//  598 	LCD_Set_Pos(x1,y2>>3);
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  599   for(n=x1;n<=x2;n++)
        MOV      R9,R5
        B.N      ??LCD_Rectangle_3
//  600 	{
//  601 		LCD_WrDat(0x01<<(y2%8)); 			
??LCD_Rectangle_4:
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  602 		if(gif == 1) 	LCD_DLY_ms(15);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??LCD_Rectangle_5
        MOVS     R0,#+15
        BL       LCD_DLY_ms
//  603 	}
??LCD_Rectangle_5:
        ADDS     R9,R9,#+1
??LCD_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??LCD_Rectangle_4
//  604 	
//  605 }  
        POP      {R0,R4-R9,PC}    ;; return
//  606 //==============================================================
//  607 //函数名：LCD_P6x8Str(byte x,byte y,byte *p)
//  608 //功能描述：写入一组标准ASCII字符串
//  609 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  610 //返回：无
//  611 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  612 void LCD_P6x8Str(uint8 x,uint8 y,uint8 ch[])
//  613 {
LCD_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  614   uint8 c=0,i=0,j=0;      
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P6x8Str_0
//  615   while (ch[j]!='\0')
//  616   {    
//  617     c =ch[j]-32;
//  618     if(x>126){x=0;y++;}
//  619     LCD_Set_Pos(x,y);    
//  620   	for(i=0;i<6;i++)     
//  621   	  LCD_WrDat(F6x8[c][i]);  
??LCD_P6x8Str_1:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R0,#+6
        LDR.W    R1,??DataTable7_1
        MLA      R0,R0,R7,R1
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P6x8Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BCC.N    ??LCD_P6x8Str_1
//  622   	x+=6;
        ADDS     R4,R4,#+6
//  623   	j++;
        ADDS     R9,R9,#+1
??LCD_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P6x8Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BCC.N    ??LCD_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P6x8Str_2
//  624   }
//  625 }
??LCD_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  626 //==============================================================
//  627 //函数名：LCD_P8x16Str(byte x,byte y,byte *p)
//  628 //功能描述：写入一组标准ASCII字符串
//  629 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  630 //返回：无
//  631 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  632 void LCD_P8x16Str(uint8 x,uint8 y,uint8 ch[])
//  633 {
LCD_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  634   uint8 c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str_0
//  635         
//  636   while (ch[j]!='\0')
//  637   {    
//  638     c =ch[j]-32;
//  639     if(x>120){x=0;y++;}
//  640     LCD_Set_Pos(x,y);    
//  641   	for(i=0;i<8;i++)     
//  642   	  LCD_WrDat(F8X16[c*16+i]);
//  643   	LCD_Set_Pos(x,y+1);    
//  644   	for(i=0;i<8;i++)     
//  645   	  LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16Str_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R0,R7,#+4
        UXTAB    R0,R0,R8
        LDR.W    R1,??DataTable7_2
        ADDS     R0,R0,R1
        LDRB     R0,[R0, #+8]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BCC.N    ??LCD_P8x16Str_1
//  646   	x+=8;
        ADDS     R4,R4,#+8
//  647   	j++;
        ADDS     R9,R9,#+1
??LCD_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P8x16Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BCC.N    ??LCD_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str_5
??LCD_P8x16Str_6:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R0,R7,#+4
        UXTAB    R0,R0,R8
        LDR.N    R1,??DataTable7_2
        LDRB     R0,[R0, R1]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BCC.N    ??LCD_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str_2
//  648   }
//  649 }
??LCD_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  650 //====================================================================
//  651 //函数名：void LCD_P8x16_number(uint8 x,uint8 y,uint32 data)
//  652 //功能描述：可以直接显示一个数字
//  653 //参数：显示的位置（x,y）,显示的内容
//  654 //返回：无
//  655 //====================================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  656 void LCD_P8x16_number(uint8 x,uint8 y,uint32 data)
//  657 {
LCD_P8x16_number:
        PUSH     {R2-R8,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  658   uint8 c=0,i=0,j=0;
        MOVS     R6,#+0
        MOVS     R7,#+0
        MOVS     R8,#+0
//  659   
//  660   uint8 num[5];
//  661   
//  662   num[0]=data/10000;
        MOVW     R0,#+10000
        UDIV     R0,R2,R0
        STRB     R0,[SP, #+0]
//  663   num[1]=data/1000%10;
        MOV      R0,#+1000
        UDIV     R0,R2,R0
        MOVS     R1,#+10
        UDIV     R3,R0,R1
        MLS      R0,R1,R3,R0
        STRB     R0,[SP, #+1]
//  664   num[2]=data/100%10;
        MOVS     R0,#+100
        UDIV     R0,R2,R0
        MOVS     R1,#+10
        UDIV     R3,R0,R1
        MLS      R0,R1,R3,R0
        STRB     R0,[SP, #+2]
//  665   num[3]=data/10%10;
        MOVS     R0,#+10
        UDIV     R0,R2,R0
        MOVS     R1,#+10
        UDIV     R3,R0,R1
        MLS      R0,R1,R3,R0
        STRB     R0,[SP, #+3]
//  666   num[4]=data%10;
        MOVS     R0,#+10
        UDIV     R1,R2,R0
        MLS      R0,R0,R1,R2
        STRB     R0,[SP, #+4]
//  667   
//  668  for(j=0;j<5;j++)
        MOVS     R0,#+0
        MOV      R8,R0
        B.N      ??LCD_P8x16_number_0
//  669  {    
//  670     c=num[j]+16;
//  671     if(x>120){x=0;y++;}
//  672     LCD_Set_Pos(x,y);    
//  673   	for(i=0;i<8;i++)     
//  674   	  LCD_WrDat(F8X16[c*16+i]);
//  675   	LCD_Set_Pos(x,y+1);    
//  676   	for(i=0;i<8;i++)     
//  677   	  LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16_number_1:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R0,R6,#+4
        UXTAB    R0,R0,R7
        LDR.N    R1,??DataTable7_2
        ADDS     R0,R0,R1
        LDRB     R0,[R0, #+8]
        BL       LCD_WrDat
        ADDS     R7,R7,#+1
??LCD_P8x16_number_2:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BCC.N    ??LCD_P8x16_number_1
//  678   	x+=8;
        ADDS     R4,R4,#+8
        ADDS     R8,R8,#+1
??LCD_P8x16_number_0:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+5
        BCS.N    ??LCD_P8x16_number_3
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        ADD      R0,SP,#+0
        LDRB     R0,[R8, R0]
        ADDS     R6,R0,#+16
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BCC.N    ??LCD_P8x16_number_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16_number_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R7,#+0
        B.N      ??LCD_P8x16_number_5
??LCD_P8x16_number_6:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R0,R6,#+4
        UXTAB    R0,R0,R7
        LDR.N    R1,??DataTable7_2
        LDRB     R0,[R0, R1]
        BL       LCD_WrDat
        ADDS     R7,R7,#+1
??LCD_P8x16_number_5:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BCC.N    ??LCD_P8x16_number_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R7,#+0
        B.N      ??LCD_P8x16_number_2
//  679   }
//  680 } 
??LCD_P8x16_number_3:
        POP      {R0,R1,R4-R8,PC}  ;; return
//  681 
//  682 //====================================================================
//  683 //函数名：void LCD_P8x16_num3wei(uint8 x,uint8 y,uint32 data)
//  684 //功能描述：可以直接显示一个数字
//  685 //参数：显示的位置（x,y）,显示的内容
//  686 //返回：无
//  687 //====================================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  688 void LCD_P8x16_num3wei(uint8 x,uint8 y,uint32 data)
//  689 {
LCD_P8x16_num3wei:
        PUSH     {R4-R8,LR}
        SUB      SP,SP,#+8
        MOVS     R4,R0
        MOVS     R5,R1
//  690   uint8 c=0,i=0,j=0;
        MOVS     R6,#+0
        MOVS     R7,#+0
        MOVS     R8,#+0
//  691   
//  692   uint8 num[3];
//  693   num[0]=data/100;
        MOVS     R0,#+100
        UDIV     R0,R2,R0
        STRB     R0,[SP, #+0]
//  694   num[1]=data/10%10;
        MOVS     R0,#+10
        UDIV     R0,R2,R0
        MOVS     R1,#+10
        UDIV     R3,R0,R1
        MLS      R0,R1,R3,R0
        STRB     R0,[SP, #+1]
//  695   num[2]=data%10;
        MOVS     R0,#+10
        UDIV     R1,R2,R0
        MLS      R0,R0,R1,R2
        STRB     R0,[SP, #+2]
//  696   
//  697  for(j=0;j<3;j++)
        MOVS     R0,#+0
        MOV      R8,R0
        B.N      ??LCD_P8x16_num3wei_0
//  698  {    
//  699     c=num[j]+16;
//  700     if(x>120){x=0;y++;}
//  701     LCD_Set_Pos(x,y);    
//  702   	for(i=0;i<8;i++)     
//  703   	  LCD_WrDat(F8X16[c*16+i]);
//  704   	LCD_Set_Pos(x,y+1);    
//  705   	for(i=0;i<8;i++)     
//  706   	  LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16_num3wei_1:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R0,R6,#+4
        UXTAB    R0,R0,R7
        LDR.N    R1,??DataTable7_2
        ADDS     R0,R0,R1
        LDRB     R0,[R0, #+8]
        BL       LCD_WrDat
        ADDS     R7,R7,#+1
??LCD_P8x16_num3wei_2:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BCC.N    ??LCD_P8x16_num3wei_1
//  707   	x+=8;
        ADDS     R4,R4,#+8
        ADDS     R8,R8,#+1
??LCD_P8x16_num3wei_0:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+3
        BCS.N    ??LCD_P8x16_num3wei_3
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        ADD      R0,SP,#+0
        LDRB     R0,[R8, R0]
        ADDS     R6,R0,#+16
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BCC.N    ??LCD_P8x16_num3wei_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16_num3wei_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R7,#+0
        B.N      ??LCD_P8x16_num3wei_5
??LCD_P8x16_num3wei_6:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R0,R6,#+4
        UXTAB    R0,R0,R7
        LDR.N    R1,??DataTable7_2
        LDRB     R0,[R0, R1]
        BL       LCD_WrDat
        ADDS     R7,R7,#+1
??LCD_P8x16_num3wei_5:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BCC.N    ??LCD_P8x16_num3wei_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R7,#+0
        B.N      ??LCD_P8x16_num3wei_2
//  708   }
//  709 } 
??LCD_P8x16_num3wei_3:
        POP      {R0,R1,R4-R8,PC}  ;; return
//  710 
//  711 
//  712 
//  713 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  714 void LCD_Print(uint8 x, uint8 y,uint8 ch[])
//  715 {
LCD_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  716 	uint8 ch2[3];
//  717 	uint8 ii=0;        
        MOVS     R7,#+0
        B.N      ??LCD_Print_0
//  718 	while(ch[ii] != '\0')
//  719 	{
//  720 		if(ch[ii] > 127)
//  721 		{
//  722 			ch2[0] = ch[ii];
??LCD_Print_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  723 	 		ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
//  724 			ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
//  725 			LCD_P14x16Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P14x16Str
//  726 			x += 14;
        ADDS     R4,R4,#+14
//  727 			ii += 2;
        ADDS     R7,R7,#+2
//  728 		}
??LCD_Print_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_Print_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BCS.N    ??LCD_Print_1
//  729 		else
//  730 		{
//  731 			ch2[0] = ch[ii];	
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
//  732 			ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
//  733 			LCD_P8x16Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Str
//  734 			x += 8;
        ADDS     R4,R4,#+8
//  735 			ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??LCD_Print_0
//  736 		}
//  737 	}
//  738 } 
??LCD_Print_2:
        POP      {R0,R4-R7,PC}    ;; return
//  739 
//  740 //==============================================================
//  741 //函数名： void Draw_BMP(byte x,byte y)
//  742 //功能描述：显示BMP图片128×64
//  743 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
//  744 //返回：无
//  745 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  746 void Draw_BMP(uint8 x0,uint8 y0,uint8 x1,uint8 y1,uint8 bmp[])
//  747 { 	
Draw_BMP:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
        MOVS     R6,R3
        LDR      R7,[SP, #+32]
//  748   uint32 ii=0;
        MOVS     R8,#+0
//  749   uint8 x,y;
//  750   
//  751   if(y1%8==0) y=y1/8;      
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R2,R6,R0
        MLS      R2,R2,R0,R6
        CMP      R2,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R10,R6,R0
        B.N      ??Draw_BMP_1
//  752   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R6,R0
        ADDS     R10,R0,#+1
//  753 	for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R10,R1
        B.N      ??Draw_BMP_2
//  754 	{
//  755 		LCD_Set_Pos(x0,y);				
//  756     for(x=x0;x<x1;x++)
//  757 	    {      
//  758 	    	LCD_WrDat(bmp[ii++]);	    	
??Draw_BMP_3:
        LDRB     R0,[R8, R7]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
//  759 	    }
        ADDS     R9,R9,#+1
??Draw_BMP_4:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R9,R5
        BCC.N    ??Draw_BMP_3
        ADDS     R10,R10,#+1
??Draw_BMP_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R6,R10
        BCC.N    ??Draw_BMP_5
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOV      R9,R4
        B.N      ??Draw_BMP_4
//  760 	}
//  761 }
??Draw_BMP_5:
        POP      {R4-R10,PC}      ;; return
//  762 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  763 void show_pic()
//  764 {
show_pic:
        PUSH     {R3-R7,LR}
//  765   uint8 i=0,j=0,k=0,temp=0,row=0,col=0,data=0;
        MOVS     R4,#+0
        MOVS     R1,#+0
        MOVS     R5,#+0
        MOVS     R2,#+0
        MOVS     R6,#+0
        MOVS     R7,#+0
        MOVS     R0,#+0
//  766   
//  767   if(!(ROW%16)) //行数可以被16整除
//  768     row=ROW/16;
//  769   else
//  770     row=ROW/16+1;
        MOVS     R3,#+16
        MOVS     R6,R3
//  771   
//  772   col=COLUMN/2;
        MOVS     R3,#+127
        MOVS     R7,R3
//  773   
//  774   for(k=0;k<row;k++)
        MOVS     R3,#+0
        MOVS     R5,R3
        B.N      ??show_pic_0
??show_pic_1:
        ADDS     R5,R5,#+1
??show_pic_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R5,R6
        BCS.N    ??show_pic_2
//  775   {
//  776     LCD_Set_Pos(0,k);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
//  777     for(i=0;i<col;i++)
        MOVS     R4,#+0
        B.N      ??show_pic_3
//  778     {
//  779       if(k<row-1)
//  780       {
//  781         data=0;
//  782         for(j=0;j<8;j++)
//  783         {
//  784           temp=PHOTO_BUFF[j*2+k*16][i*2];
//  785           data|=temp<<j;
//  786         }
//  787         LCD_WrDat(data);
//  788       }
//  789       else
//  790       {
//  791         data=0;
//  792         for(j=0;j<ROW%16;j++)
//  793         {
//  794           temp=PHOTO_BUFF[j*2+k*16][i*2];
??show_pic_4:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSLS     R2,R5,#+4
        ADDS     R2,R2,R1, LSL #+1
        MOVS     R3,#+255
        LDR.W    R12,??DataTable7_3
        MLA      R2,R3,R2,R12
        LDRB     R2,[R2, R4, LSL #+1]
//  795           data|=temp<<j;
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        LSLS     R2,R2,R1
        ORRS     R0,R2,R0
//  796         }
        ADDS     R1,R1,#+1
??show_pic_5:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R1,#+15
        BCC.N    ??show_pic_4
//  797         LCD_WrDat(data);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
??show_pic_6:
        ADDS     R4,R4,#+1
??show_pic_3:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R4,R7
        BCS.N    ??show_pic_1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        SUBS     R0,R6,#+1
        CMP      R5,R0
        BGE.N    ??show_pic_7
        MOVS     R0,#+0
        MOVS     R1,#+0
        B.N      ??show_pic_8
??show_pic_9:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSLS     R2,R5,#+4
        ADDS     R2,R2,R1, LSL #+1
        MOVS     R3,#+255
        LDR.W    R12,??DataTable7_3
        MLA      R2,R3,R2,R12
        LDRB     R2,[R2, R4, LSL #+1]
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        LSLS     R2,R2,R1
        ORRS     R0,R2,R0
        ADDS     R1,R1,#+1
??show_pic_8:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R1,#+8
        BCC.N    ??show_pic_9
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        B.N      ??show_pic_6
??show_pic_7:
        MOVS     R0,#+0
        MOVS     R1,#+0
        B.N      ??show_pic_5
//  798       }
//  799     }
//  800   }
//  801   
//  802   /*
//  803   uint8 i=0,j=0,n=0;//用来显示图像的计数器
//  804   uint8 single_value=0;//存储二值图像数组8行1列的数据
//  805   uint8 row_need=0;//实际显示需要的行数
//  806   uint8 column_need=0;//实际需要的列数
//  807   uint8 temp=0;
//  808   
//  809   if(!(ROW%16)) //行数可以被16整除
//  810     row_need=ROW/16;
//  811   else
//  812     row_need=ROW/16+1;
//  813  
//  814   column_need=COLUMN/2;
//  815   
//  816   for(j=0;j<row_need;j++) //行处理
//  817   {
//  818     
//  819     LCD_Set_Pos(0,j);
//  820     for(i=0;i<column_need;i++) //列处理
//  821     {
//  822       
//  823       
//  824       if((j<row_need-1)||(!(ROW%16)))//倒数第二行之前，或者整个行数可以被16整除，则处理
//  825       {
//  826         single_value=0;
//  827         for(n=0;n<8;n++)
//  828         {
//  829           temp=PHOTO_BUFF[j+2*n][i];
//  830           single_value=single_value||(temp<<n);
//  831         }
//  832         LCD_WrDat(single_value);
//  833       }//倒数第二。。。
//  834       
//  835       else //最后一行，且无法被整除，处理方法
//  836       {
//  837          single_value=0;
//  838          for(n=0;n<(ROW%16);n++)
//  839          {
//  840           temp=PHOTO_BUFF[j+2*n][i];
//  841           single_value=single_value||(temp<<n);
//  842          }
//  843          LCD_WrDat(single_value);
//  844       }//最后一行。。。
//  845       //LCD_WrDat(single_value);
//  846       
//  847     }//列处理。。。
//  848     
//  849   }//行处理。。。  
//  850   */
//  851 }//end of show_pic...
??show_pic_2:
        POP      {R0,R4-R7,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7:
        DC32     0x400ff100

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_1:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_2:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7_3:
        DC32     PHOTO_BUFF

        SECTION `.iar_vfe_header`:DATA:REORDER:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 
// 65 028 bytes in section .bss
//  2 072 bytes in section .rodata
//  2 396 bytes in section .text
// 
//  2 396 bytes of CODE  memory
//  2 072 bytes of CONST memory
// 65 028 bytes of DATA  memory
//
//Errors: none
//Warnings: none
